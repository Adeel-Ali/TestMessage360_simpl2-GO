/*
 * testmessage360simpl2_lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 10/03/2016
 */
package call_pkg


import(
	"testmessage360simpl2_lib/models_pkg"
	"github.com/apimatic/unirest-go"
	"testmessage360simpl2_lib"
	"testmessage360simpl2_lib/apihelper_pkg"
)
/*
 * Client structure as interface implementation
 */
type CALL_IMPL struct { }

/**
 * View Call Response XML
 * @param    string        callsid     parameter: Required
 * @return	Returns the string response from the API call
 */
func (me *CALL_IMPL) CreateViewCallXML (
            callsid string) (string, error) {
        //the base uri for api requests
    _queryBuilder := testmessage360simpl2_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/calls/viewcalls.xml"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return "", err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
    }

    //form parameters
    parameters := map[string]interface{} {

        "callsid" : callsid,

    }


    //prepare API request
    _request := unirest.PostWithAuth(_queryBuilder, headers, parameters, testmessage360simpl2_lib.Config.AccountSid, testmessage360simpl2_lib.Config.AuthToken)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return "", err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return "", err
    }

    //returning the response
    return _response.Body, nil
}

/**
 * View Call Response JSON
 * @param    string        callsid     parameter: Required
 * @return	Returns the string response from the API call
 */
func (me *CALL_IMPL) CreateViewCallJSON (
            callsid string) (string, error) {
        //the base uri for api requests
    _queryBuilder := testmessage360simpl2_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/calls/viewcalls.json"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return "", err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
    }

    //form parameters
    parameters := map[string]interface{} {

        "callsid" : callsid,

    }


    //prepare API request
    _request := unirest.PostWithAuth(_queryBuilder, headers, parameters, testmessage360simpl2_lib.Config.AccountSid, testmessage360simpl2_lib.Config.AuthToken)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return "", err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return "", err
    }

    //returning the response
    return _response.Body, nil
}

/**
 * Record Call XML
 * @param    string                            callSid         parameter: Required
 * @param    bool                              record          parameter: Required
 * @param    models_pkg.DirectionEnum          direction       parameter: Optional
 * @param    *int64                            timeLimit       parameter: Optional
 * @param    *string                           callBackUrl     parameter: Optional
 * @param    models_pkg.AudioFormatEnum        fileformat      parameter: Optional
 * @return	Returns the string response from the API call
 */
func (me *CALL_IMPL) CreateRecordCallXML (
            callSid string,
            record bool,
            direction models_pkg.DirectionEnum,
            timeLimit *int64,
            callBackUrl *string,
            fileformat models_pkg.AudioFormatEnum) (string, error) {
        //the base uri for api requests
    _queryBuilder := testmessage360simpl2_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/calls/recordcalls.xml"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return "", err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
    }

    //form parameters
    parameters := map[string]interface{} {

        "CallSid" : callSid,
        "Record" : record,
        "Direction" : models_pkg.DirectionEnumToValue(direction),
        "TimeLimit" : timeLimit,
        "CallBackUrl" : callBackUrl,
        "Fileformat" : models_pkg.AudioFormatEnumToValue(fileformat),

    }


    //prepare API request
    _request := unirest.PostWithAuth(_queryBuilder, headers, parameters, testmessage360simpl2_lib.Config.AccountSid, testmessage360simpl2_lib.Config.AuthToken)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return "", err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return "", err
    }

    //returning the response
    return _response.Body, nil
}

/**
 * Record Call Json
 * @param    string                            callSid         parameter: Required
 * @param    bool                              record          parameter: Required
 * @param    models_pkg.DirectionEnum          direction       parameter: Optional
 * @param    *int64                            timeLimit       parameter: Optional
 * @param    *string                           callBackUrl     parameter: Optional
 * @param    models_pkg.AudioFormatEnum        fileformat      parameter: Optional
 * @return	Returns the string response from the API call
 */
func (me *CALL_IMPL) CreateRecordCallJSON (
            callSid string,
            record bool,
            direction models_pkg.DirectionEnum,
            timeLimit *int64,
            callBackUrl *string,
            fileformat models_pkg.AudioFormatEnum) (string, error) {
        //the base uri for api requests
    _queryBuilder := testmessage360simpl2_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/calls/recordcalls.json"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return "", err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
    }

    //form parameters
    parameters := map[string]interface{} {

        "CallSid" : callSid,
        "Record" : record,
        "Direction" : models_pkg.DirectionEnumToValue(direction),
        "TimeLimit" : timeLimit,
        "CallBackUrl" : callBackUrl,
        "Fileformat" : models_pkg.AudioFormatEnumToValue(fileformat),

    }


    //prepare API request
    _request := unirest.PostWithAuth(_queryBuilder, headers, parameters, testmessage360simpl2_lib.Config.AccountSid, testmessage360simpl2_lib.Config.AuthToken)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return "", err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return "", err
    }

    //returning the response
    return _response.Body, nil
}

/**
 * Voice Effect JSON
 * @param    string                               callSid            parameter: Required
 * @param    models_pkg.AudioDirectionEnum        audioDirection     parameter: Optional
 * @param    *float64                             pitchSemiTones     parameter: Optional
 * @param    *float64                             pitchOctaves       parameter: Optional
 * @param    *float64                             pitch              parameter: Optional
 * @param    *float64                             rate               parameter: Optional
 * @param    *float64                             tempo              parameter: Optional
 * @return	Returns the string response from the API call
 */
func (me *CALL_IMPL) CreateVoiceEffectXML (
            callSid string,
            audioDirection models_pkg.AudioDirectionEnum,
            pitchSemiTones *float64,
            pitchOctaves *float64,
            pitch *float64,
            rate *float64,
            tempo *float64) (string, error) {
        //the base uri for api requests
    _queryBuilder := testmessage360simpl2_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/calls/voiceeffect.xml"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return "", err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
    }

    //form parameters
    parameters := map[string]interface{} {

        "CallSid" : callSid,
        "AudioDirection" : models_pkg.AudioDirectionEnumToValue(audioDirection),
        "PitchSemiTones" : pitchSemiTones,
        "PitchOctaves" : pitchOctaves,
        "Pitch" : pitch,
        "Rate" : rate,
        "Tempo" : tempo,

    }


    //prepare API request
    _request := unirest.PostWithAuth(_queryBuilder, headers, parameters, testmessage360simpl2_lib.Config.AccountSid, testmessage360simpl2_lib.Config.AuthToken)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return "", err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return "", err
    }

    //returning the response
    return _response.Body, nil
}

/**
 * Voice Effect JSON
 * @param    string                               callSid            parameter: Required
 * @param    models_pkg.AudioDirectionEnum        audioDirection     parameter: Optional
 * @param    *float64                             pitchSemiTones     parameter: Optional
 * @param    *float64                             pitchOctaves       parameter: Optional
 * @param    *float64                             pitch              parameter: Optional
 * @param    *float64                             rate               parameter: Optional
 * @param    *float64                             tempo              parameter: Optional
 * @return	Returns the string response from the API call
 */
func (me *CALL_IMPL) CreateVoiceEffectJSON (
            callSid string,
            audioDirection models_pkg.AudioDirectionEnum,
            pitchSemiTones *float64,
            pitchOctaves *float64,
            pitch *float64,
            rate *float64,
            tempo *float64) (string, error) {
        //the base uri for api requests
    _queryBuilder := testmessage360simpl2_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/calls/voiceeffect.json"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return "", err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
    }

    //form parameters
    parameters := map[string]interface{} {

        "CallSid" : callSid,
        "AudioDirection" : models_pkg.AudioDirectionEnumToValue(audioDirection),
        "PitchSemiTones" : pitchSemiTones,
        "PitchOctaves" : pitchOctaves,
        "Pitch" : pitch,
        "Rate" : rate,
        "Tempo" : tempo,

    }


    //prepare API request
    _request := unirest.PostWithAuth(_queryBuilder, headers, parameters, testmessage360simpl2_lib.Config.AccountSid, testmessage360simpl2_lib.Config.AuthToken)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return "", err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return "", err
    }

    //returning the response
    return _response.Body, nil
}

/**
 * Play audio XML response
 * @param    string                          callSid       parameter: Required
 * @param    string                          audioUrl      parameter: Required
 * @param    *int64                          length        parameter: Optional
 * @param    models_pkg.DirectionEnum        direction     parameter: Optional
 * @param    *bool                           loop          parameter: Optional
 * @param    *bool                           mix           parameter: Optional
 * @return	Returns the string response from the API call
 */
func (me *CALL_IMPL) CreatePlayAudioXML (
            callSid string,
            audioUrl string,
            length *int64,
            direction models_pkg.DirectionEnum,
            loop *bool,
            mix *bool) (string, error) {
        //the base uri for api requests
    _queryBuilder := testmessage360simpl2_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/calls/playaudios.xml"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return "", err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
    }

    //form parameters
    parameters := map[string]interface{} {

        "CallSid" : callSid,
        "AudioUrl" : audioUrl,
        "Length" : length,
        "Direction" : models_pkg.DirectionEnumToValue(direction),
        "Loop" : loop,
        "Mix" : mix,

    }


    //prepare API request
    _request := unirest.PostWithAuth(_queryBuilder, headers, parameters, testmessage360simpl2_lib.Config.AccountSid, testmessage360simpl2_lib.Config.AuthToken)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return "", err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return "", err
    }

    //returning the response
    return _response.Body, nil
}

/**
 * Play Dtmf and send the Digit IN JSON
 * @param    int64                           length        parameter: Required
 * @param    models_pkg.DirectionEnum        direction     parameter: Required
 * @param    bool                            loop          parameter: Required
 * @param    bool                            mix           parameter: Required
 * @param    *string                         callSid       parameter: Optional
 * @param    *string                         audioUrl      parameter: Optional
 * @return	Returns the string response from the API call
 */
func (me *CALL_IMPL) CreatePlayAudioJSON (
            length int64,
            direction models_pkg.DirectionEnum,
            loop bool,
            mix bool,
            callSid *string,
            audioUrl *string) (string, error) {
        //the base uri for api requests
    _queryBuilder := testmessage360simpl2_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/calls/playaudios.json"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return "", err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
    }

    //form parameters
    parameters := map[string]interface{} {

        "Length" : length,
        "Direction" : models_pkg.DirectionEnumToValue(direction),
        "Loop" : loop,
        "Mix" : mix,
        "CallSid" : callSid,
        "AudioUrl" : audioUrl,

    }


    //prepare API request
    _request := unirest.PostWithAuth(_queryBuilder, headers, parameters, testmessage360simpl2_lib.Config.AccountSid, testmessage360simpl2_lib.Config.AuthToken)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return "", err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return "", err
    }

    //returning the response
    return _response.Body, nil
}

/**
 * Returned xml response here contains a list of calls associated with your Message360 account
 * @param    *string        page            parameter: Optional
 * @param    *string        pageSize        parameter: Optional
 * @param    *string        to              parameter: Optional
 * @param    *string        from            parameter: Optional
 * @param    *string        dateCreated     parameter: Optional
 * @return	Returns the string response from the API call
 */
func (me *CALL_IMPL) CreateListCallXML (
            page *string,
            pageSize *string,
            to *string,
            from *string,
            dateCreated *string) (string, error) {
        //the base uri for api requests
    _queryBuilder := testmessage360simpl2_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/calls/listcalls.xml"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return "", err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
    }

    //form parameters
    parameters := map[string]interface{} {

        "Page" : page,
        "PageSize" : pageSize,
        "To" : to,
        "From" : from,
        "DateCreated" : dateCreated,

    }


    //prepare API request
    _request := unirest.PostWithAuth(_queryBuilder, headers, parameters, testmessage360simpl2_lib.Config.AccountSid, testmessage360simpl2_lib.Config.AuthToken)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return "", err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return "", err
    }

    //returning the response
    return _response.Body, nil
}

/**
 * Returned Json response here contains a list of calls associated with your Message360 account
 * @param    *string        page            parameter: Optional
 * @param    *string        pageSize        parameter: Optional
 * @param    *string        to              parameter: Optional
 * @param    *string        from            parameter: Optional
 * @param    *string        dateCreated     parameter: Optional
 * @return	Returns the  response from the API call
 */
func (me *CALL_IMPL) CreateListCallJSON (
            page *string,
            pageSize *string,
            to *string,
            from *string,
            dateCreated *string) (error) {
        //the base uri for api requests
    _queryBuilder := testmessage360simpl2_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/calls/listcalls.json"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
    }

    //form parameters
    parameters := map[string]interface{} {

        "Page" : page,
        "PageSize" : pageSize,
        "To" : to,
        "From" : from,
        "DateCreated" : dateCreated,

    }


    //prepare API request
    _request := unirest.PostWithAuth(_queryBuilder, headers, parameters, testmessage360simpl2_lib.Config.AccountSid, testmessage360simpl2_lib.Config.AuthToken)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return err
    }

    //returning the response
    return nil
}

/**
 * Interrupt the Call by Call Sid
 * @param    string                                      callSid     parameter: Required
 * @param    *string                                     url         parameter: Optional
 * @param    models_pkg.HttpMethodEnum                   method      parameter: Optional
 * @param    models_pkg.InterruptedCallStatusEnum        status      parameter: Optional
 * @return	Returns the string response from the API call
 */
func (me *CALL_IMPL) CreateInterruptedCallJSON (
            callSid string,
            url *string,
            method models_pkg.HttpMethodEnum,
            status models_pkg.InterruptedCallStatusEnum) (string, error) {
        //the base uri for api requests
    _queryBuilder := testmessage360simpl2_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/calls/interruptcalls.json"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return "", err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
    }

    //form parameters
    parameters := map[string]interface{} {

        "CallSid" : callSid,
        "Url" : url,
        "Method" : models_pkg.HttpMethodEnumToValue(method),
        "Status" : models_pkg.InterruptedCallStatusEnumToValue(status),

    }


    //prepare API request
    _request := unirest.PostWithAuth(_queryBuilder, headers, parameters, testmessage360simpl2_lib.Config.AccountSid, testmessage360simpl2_lib.Config.AuthToken)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return "", err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return "", err
    }

    //returning the response
    return _response.Body, nil
}

/**
 * Play Dtmf and send the Digit IN JSON
 * @param    string                          callSid               parameter: Required
 * @param    string                          playDtmf              parameter: Required
 * @param    models_pkg.DirectionEnum        playDtmfDirection     parameter: Optional
 * @return	Returns the string response from the API call
 */
func (me *CALL_IMPL) CreateSendDigitJSON (
            callSid string,
            playDtmf string,
            playDtmfDirection models_pkg.DirectionEnum) (string, error) {
        //the base uri for api requests
    _queryBuilder := testmessage360simpl2_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/calls/senddigits.json"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return "", err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
    }

    //form parameters
    parameters := map[string]interface{} {

        "CallSid" : callSid,
        "PlayDtmf" : playDtmf,
        "PlayDtmfDirection" : models_pkg.DirectionEnumToValue(playDtmfDirection),

    }


    //prepare API request
    _request := unirest.PostWithAuth(_queryBuilder, headers, parameters, testmessage360simpl2_lib.Config.AccountSid, testmessage360simpl2_lib.Config.AuthToken)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return "", err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return "", err
    }

    //returning the response
    return _response.Body, nil
}

/**
 * Interrupt the Call by Call Sid XML Format
 * @param    string                                      callSid     parameter: Required
 * @param    *string                                     url         parameter: Optional
 * @param    models_pkg.HttpMethodEnum                   method      parameter: Optional
 * @param    models_pkg.InterruptedCallStatusEnum        status      parameter: Optional
 * @return	Returns the string response from the API call
 */
func (me *CALL_IMPL) CreateInterruptedCallXML (
            callSid string,
            url *string,
            method models_pkg.HttpMethodEnum,
            status models_pkg.InterruptedCallStatusEnum) (string, error) {
        //the base uri for api requests
    _queryBuilder := testmessage360simpl2_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/calls/interruptcalls.xml"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return "", err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
    }

    //form parameters
    parameters := map[string]interface{} {

        "CallSid" : callSid,
        "Url" : url,
        "Method" : models_pkg.HttpMethodEnumToValue(method),
        "Status" : models_pkg.InterruptedCallStatusEnumToValue(status),

    }


    //prepare API request
    _request := unirest.PostWithAuth(_queryBuilder, headers, parameters, testmessage360simpl2_lib.Config.AccountSid, testmessage360simpl2_lib.Config.AuthToken)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return "", err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return "", err
    }

    //returning the response
    return _response.Body, nil
}

/**
 * Play Dtmf and send the Digit in XML 
 * @param    string                          callSid               parameter: Required
 * @param    string                          playDtmf              parameter: Required
 * @param    models_pkg.DirectionEnum        playDtmfDirection     parameter: Optional
 * @return	Returns the string response from the API call
 */
func (me *CALL_IMPL) CreateSendDigitXML (
            callSid string,
            playDtmf string,
            playDtmfDirection models_pkg.DirectionEnum) (string, error) {
        //the base uri for api requests
    _queryBuilder := testmessage360simpl2_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/calls/senddigits.xml"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return "", err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
    }

    //form parameters
    parameters := map[string]interface{} {

        "CallSid" : callSid,
        "PlayDtmf" : playDtmf,
        "PlayDtmfDirection" : models_pkg.DirectionEnumToValue(playDtmfDirection),

    }


    //prepare API request
    _request := unirest.PostWithAuth(_queryBuilder, headers, parameters, testmessage360simpl2_lib.Config.AccountSid, testmessage360simpl2_lib.Config.AuthToken)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return "", err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return "", err
    }

    //returning the response
    return _response.Body, nil
}

/**
 * You can experiment with initiating a call through Message360 and view the request response generated when doing so and get the response in xml
 * @param    models_pkg.HttpMethodEnum        method                    parameter: Required
 * @param    string                           statusCallBackUrl         parameter: Required
 * @param    models_pkg.HttpMethodEnum        statusCallBackMethod      parameter: Required
 * @param    string                           fallBackUrl               parameter: Required
 * @param    models_pkg.HttpMethodEnum        fallBackMethod            parameter: Required
 * @param    string                           heartBeatUrl              parameter: Required
 * @param    models_pkg.HttpMethodEnum        heartBeatMethod           parameter: Required
 * @param    int64                            timeout                   parameter: Required
 * @param    string                           playDtmf                  parameter: Required
 * @param    bool                             hideCallerId              parameter: Required
 * @param    bool                             record                    parameter: Required
 * @param    string                           recordCallBackUrl         parameter: Required
 * @param    models_pkg.HttpMethodEnum        recordCallBackMethod      parameter: Required
 * @param    bool                             transcribe                parameter: Required
 * @param    string                           transcribeCallBackUrl     parameter: Required
 * @param    models_pkg.IfMachineEnum         ifMachine                 parameter: Required
 * @param    *string                          fromCountryCode           parameter: Optional
 * @param    *string                          from                      parameter: Optional
 * @param    *string                          toCountryCode             parameter: Optional
 * @param    *string                          to                        parameter: Optional
 * @param    *string                          url                       parameter: Optional
 * @return	Returns the string response from the API call
 */
func (me *CALL_IMPL) CreateMakeCallXML (
            method models_pkg.HttpMethodEnum,
            statusCallBackUrl string,
            statusCallBackMethod models_pkg.HttpMethodEnum,
            fallBackUrl string,
            fallBackMethod models_pkg.HttpMethodEnum,
            heartBeatUrl string,
            heartBeatMethod models_pkg.HttpMethodEnum,
            timeout int64,
            playDtmf string,
            hideCallerId bool,
            record bool,
            recordCallBackUrl string,
            recordCallBackMethod models_pkg.HttpMethodEnum,
            transcribe bool,
            transcribeCallBackUrl string,
            ifMachine models_pkg.IfMachineEnum,
            fromCountryCode *string,
            from *string,
            toCountryCode *string,
            to *string,
            url *string) (string, error) {
        //the base uri for api requests
    _queryBuilder := testmessage360simpl2_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/calls/makecall.xml"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return "", err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
    }

    //form parameters
    parameters := map[string]interface{} {

        "Method" : models_pkg.HttpMethodEnumToValue(method),
        "StatusCallBackUrl" : statusCallBackUrl,
        "StatusCallBackMethod" : models_pkg.HttpMethodEnumToValue(statusCallBackMethod),
        "FallBackUrl" : fallBackUrl,
        "FallBackMethod" : models_pkg.HttpMethodEnumToValue(fallBackMethod),
        "HeartBeatUrl" : heartBeatUrl,
        "HeartBeatMethod" : models_pkg.HttpMethodEnumToValue(heartBeatMethod),
        "Timeout" : timeout,
        "PlayDtmf" : playDtmf,
        "HideCallerId" : hideCallerId,
        "Record" : record,
        "RecordCallBackUrl" : recordCallBackUrl,
        "RecordCallBackMethod" : models_pkg.HttpMethodEnumToValue(recordCallBackMethod),
        "Transcribe" : transcribe,
        "TranscribeCallBackUrl" : transcribeCallBackUrl,
        "IfMachine" : models_pkg.IfMachineEnumToValue(ifMachine),
        "FromCountryCode" : fromCountryCode,
        "From" : from,
        "ToCountryCode" : toCountryCode,
        "To" : to,
        "Url" : url,

    }


    //prepare API request
    _request := unirest.PostWithAuth(_queryBuilder, headers, parameters, testmessage360simpl2_lib.Config.AccountSid, testmessage360simpl2_lib.Config.AuthToken)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return "", err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return "", err
    }

    //returning the response
    return _response.Body, nil
}

/**
 * You can experiment with initiating a call through Message360 and view the request response generated when doing so and get the response in json
 * @param    string                           fromCountryCode           parameter: Required
 * @param    string                           from                      parameter: Required
 * @param    string                           toCountryCode             parameter: Required
 * @param    string                           to                        parameter: Required
 * @param    string                           url                       parameter: Required
 * @param    models_pkg.HttpMethodEnum        method                    parameter: Optional
 * @param    *string                          statusCallBackUrl         parameter: Optional
 * @param    models_pkg.HttpMethodEnum        statusCallBackMethod      parameter: Optional
 * @param    *string                          fallBackUrl               parameter: Optional
 * @param    models_pkg.HttpMethodEnum        fallBackMethod            parameter: Optional
 * @param    *string                          heartBeatUrl              parameter: Optional
 * @param    *bool                            heartBeatMethod           parameter: Optional
 * @param    *int64                           timeout                   parameter: Optional
 * @param    *string                          playDtmf                  parameter: Optional
 * @param    *bool                            hideCallerId              parameter: Optional
 * @param    *bool                            record                    parameter: Optional
 * @param    *string                          recordCallBackUrl         parameter: Optional
 * @param    models_pkg.HttpMethodEnum        recordCallBackMethod      parameter: Optional
 * @param    *bool                            transcribe                parameter: Optional
 * @param    *string                          transcribeCallBackUrl     parameter: Optional
 * @param    models_pkg.IfMachineEnum         ifMachine                 parameter: Optional
 * @return	Returns the string response from the API call
 */
func (me *CALL_IMPL) CreateMakeCallJSON (
            fromCountryCode string,
            from string,
            toCountryCode string,
            to string,
            url string,
            method models_pkg.HttpMethodEnum,
            statusCallBackUrl *string,
            statusCallBackMethod models_pkg.HttpMethodEnum,
            fallBackUrl *string,
            fallBackMethod models_pkg.HttpMethodEnum,
            heartBeatUrl *string,
            heartBeatMethod *bool,
            timeout *int64,
            playDtmf *string,
            hideCallerId *bool,
            record *bool,
            recordCallBackUrl *string,
            recordCallBackMethod models_pkg.HttpMethodEnum,
            transcribe *bool,
            transcribeCallBackUrl *string,
            ifMachine models_pkg.IfMachineEnum) (string, error) {
        //the base uri for api requests
    _queryBuilder := testmessage360simpl2_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/calls/makecall.json"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithQueryParameters(_queryBuilder, map[string]interface{} {
        "Method" : models_pkg.HttpMethodEnumToValue(method),
    })
    if err != nil {
        //error in query param handling
        return "", err
    }

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return "", err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
    }

    //form parameters
    parameters := map[string]interface{} {

        "FromCountryCode" : fromCountryCode,
        "From" : from,
        "ToCountryCode" : toCountryCode,
        "To" : to,
        "Url" : url,
        "StatusCallBackUrl" : statusCallBackUrl,
        "StatusCallBackMethod" : models_pkg.HttpMethodEnumToValue(statusCallBackMethod),
        "FallBackUrl" : fallBackUrl,
        "FallBackMethod" : models_pkg.HttpMethodEnumToValue(fallBackMethod),
        "HeartBeatUrl" : heartBeatUrl,
        "HeartBeatMethod" : heartBeatMethod,
        "Timeout" : timeout,
        "PlayDtmf" : playDtmf,
        "HideCallerId" : hideCallerId,
        "Record" : record,
        "RecordCallBackUrl" : recordCallBackUrl,
        "RecordCallBackMethod" : models_pkg.HttpMethodEnumToValue(recordCallBackMethod),
        "Transcribe" : transcribe,
        "TranscribeCallBackUrl" : transcribeCallBackUrl,
        "IfMachine" : models_pkg.IfMachineEnumToValue(ifMachine),

    }


    //prepare API request
    _request := unirest.PostWithAuth(_queryBuilder, headers, parameters, testmessage360simpl2_lib.Config.AccountSid, testmessage360simpl2_lib.Config.AuthToken)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return "", err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return "", err
    }

    //returning the response
    return _response.Body, nil
}

